<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Don&#39;t Painc</title>
    <link>https://tsunami42.github.io/blog/tags/go/</link>
    <description>Recent content in Go on Don&#39;t Painc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Aug 2017 22:17:26 +0800</lastBuildDate>
    
	<atom:link href="https://tsunami42.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Dep In 10min</title>
      <link>https://tsunami42.github.io/blog/posts/go-dep-in-10min/</link>
      <pubDate>Mon, 07 Aug 2017 22:17:26 +0800</pubDate>
      
      <guid>https://tsunami42.github.io/blog/posts/go-dep-in-10min/</guid>
      <description>Manifest - Gopkg.toml 用户自行维护
[[constraint]] name = &amp;quot;github.com/sdboyer/deptest&amp;quot; source = &amp;quot;http://github.com/carolynvs/deptest&amp;quot; version = &amp;quot;0.8.0&amp;quot; [[constraint]] branch = &amp;quot;master&amp;quot; name = &amp;quot;github.com/pkg/errors&amp;quot;  根据semver指定版本
Lock - Gopkg.lock [[projects]] name = &amp;quot;github.com/sdboyer/deptest&amp;quot; revision = &amp;quot;ff2948a2ac8f538c4ecd55962e919d1e13e74baf&amp;quot; version = &amp;quot;v0.8.1&amp;quot; [[projects]] name = &amp;quot;github.com/pkg/errors&amp;quot; revision = &amp;quot;17b591df37844cde689f4d5813e5cea0927d8dd2&amp;quot; version = &amp;quot;v0.7.1&amp;quot;  0.8.0 和 v0.8.1 ？ dep希望大家有使用semver的规范来管理release，默认指代一个版本范围
1.2.3 becomes &amp;gt;=1.2.3, &amp;lt;2.0.0 0.2.3 becomes &amp;gt;=0.2.3, &amp;lt;0.3.0 0.0.3 becomes &amp;gt;=0.0.3, &amp;lt;0.1.0 Use =0.8.1 to pin to a version  一些命令 dep init  使用其他的包管理：会想办法自动迁移</description>
    </item>
    
    <item>
      <title>Dep使用记录</title>
      <link>https://tsunami42.github.io/blog/posts/dep-usage/</link>
      <pubDate>Fri, 04 Aug 2017 23:35:01 +0800</pubDate>
      
      <guid>https://tsunami42.github.io/blog/posts/dep-usage/</guid>
      <description>dep介绍 今年GopherCon刚好有两个关于dep的talk
 The New Era of Go Package Management
 go dep in 10 minutes
  使用方法 $ dep init  初始化项目，会先从已有的包管理读取配置依赖信息（glide &amp;amp; godep），备份当前的vendor/然后生成相应的文件 Gopkg.toml 与Gopkg.lock，最后将依赖安装到vendor/目录下
$ dep ensure  保证vendor/目录下的依赖符合Gopkg.toml与Gopkg.lock中的配置，如果没有就创建目录
使用时的坑 我的项目有两个依赖：
 github.com/influxdata/influxdb@v1.0.0
 github.com/Shopify/sarama@v1.12.0
  原先是通过gdm来直接保存和修改GOPATH中包的版本信息，没有使用vendor的功能，所有的信息都直接从src目录下代码的版本号获得
在执行dep init后， Gopkg.toml里influxdb的依赖一直不对，一直是当前最大的tag，v1.3.1，多次尝试后，通过dep help init找到了答案
$ dep help init ... By default, the dependencies are resolved over the network. A version will be selected from the versions available from the upstream source per the following algorithm: - Tags conforming to semver (sorted by semver rules) - Default branch(es) (sorted lexicographically) - Non-semver tags (sorted lexicographically) An alternate mode can be activated by passing -gopath.</description>
    </item>
    
    <item>
      <title>Guide To Syscalls</title>
      <link>https://tsunami42.github.io/blog/posts/guide-to-syscalls/</link>
      <pubDate>Thu, 03 Aug 2017 22:13:21 +0800</pubDate>
      
      <guid>https://tsunami42.github.io/blog/posts/guide-to-syscalls/</guid>
      <description>   笔记  什么是syscalls
 用户程序调用kernel services
 文件，设备，进程，通信，时间
 strace可以看到
  syscall如何工作
 strace -c 统计syscall
 Syscall是一个兼容层，用来兼容各种设备
 syscall是设置寄存器和变量，kernel执行，取回结果
 有许多是不常用的：据说Bash on Windows只实现了一部分
  玩一下ptrace
 strace通过ptrace来获取syscall的调用信息
 自己实现一个strace玩一玩
 通过设置ptrace的SysProcAttr，实现自己的strace
 PTRACE_SYACALL有两次停顿，调用时和结束时，并且tracer是区分不出来的
  Syscall与安全
 限制程序只执行syscall一部分子集
 在微服务的架构下很有实际意义
 docker可以通过seccomp文件，限制syscall的子集
   相关链接  https://github.com/lizrice/strace-from-scratch
  </description>
    </item>
    
  </channel>
</rss>